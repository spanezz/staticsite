from __future__ import annotations

import logging

from staticsite import metadata
from staticsite.feature import Feature
from staticsite.page import Page

log = logging.getLogger("aliases")


class AliasesFeature(Feature):
    """
    Build redirection pages for page aliases.

    A page can define 'aliases=[...]' to generate pages in those locations that
    redirect to the page.
    """
    RUN_AFTER = ["autogenerated_pages"]

    def __init__(self, *args, **kw):
        super().__init__(*args, **kw)
        self.site.structure.tracked_metadata.add("aliases")
        self.site.features["rst"].yaml_tags.add("aliases")
        self.site.register_metadata(metadata.MetadataInherited("aliases", structure=True, doc="""
Relative paths in the destination directory where the page should also show up.
[Like in Hugo](https://gohugo.io/extras/aliases/), this can be used to maintain
existing links when moving a page to a different location.
"""))

    def analyze(self):
        # Build alias pages from pages with an 'aliases' metadata
        for page in self.site.structure.pages_by_metadata["aliases"]:
            aliases = page.meta.get("aliases")
            if not aliases:
                continue

            for alias in aliases:
                page = AliasPage.create_from(page, alias=alias)
                # TODO: mount on `alias`


class AliasPage(Page):
    """
    Page rendering a redirect to another page
    """
    # Default template to use for this type of page
    TEMPLATE: str

    def __init__(self, *, alias: str, **kw):
        super().__init__(**kw)
        self.meta.setdefault("template", "redirect.html")


FEATURES = {
    "aliases": AliasesFeature,
}
