from __future__ import annotations

import logging

from staticsite import fields, metadata, node
from staticsite.feature import Feature
from staticsite.page import Page


log = logging.getLogger("aliases")


class AliasesPageMixin(metaclass=metadata.FieldsMetaclass):
    aliases = fields.Field(structure=True, doc="""
        Relative paths in the destination directory where the page should also show up.
        [Like in Hugo](https://gohugo.io/extras/aliases/), this can be used to maintain
        existing links when moving a page to a different location.
    """)


class AliasesFeature(Feature):
    """
    Build redirection pages for page aliases.

    A page can define 'aliases=[...]' to generate pages in those locations that
    redirect to the page.
    """
    RUN_AFTER = ["autogenerated_pages"]

    def __init__(self, *args, **kw):
        super().__init__(*args, **kw)
        self.site.features["rst"].yaml_tags.add("aliases")
        self.page_mixins.append(AliasesPageMixin)
        self.site.structure.add_tracked_metadata("aliases")

    def analyze(self):
        # Build alias pages from pages with an 'aliases' metadata
        for page in self.site.structure.pages_by_metadata["aliases"]:
            if not (aliases := page.aliases):
                continue

            for alias in aliases:
                self.site.root.create_page(
                        page_cls=AliasPage,
                        created_from=page,
                        meta_values={"page": page},
                        path=node.Path.from_string(alias))


class AliasPage(Page):
    """
    Page rendering a redirect to another page
    """
    page = fields.Field(doc="Page this alias redirects to")
    TYPE = "alias"
    TEMPLATE = "redirect.html"


FEATURES = {
    "aliases": AliasesFeature,
}
