from unittest import TestCase
from . import utils as test_utils


class MockContext(dict):
    def __init__(self, *args, **kw):
        super().__init__(*args, **kw)
        self.name = "test"


class TestUrlFor(TestCase):
    """
    Test theme functions
    """
    def test_no_site_root(self):
        files = {
            ".staticsite": {
                "site": {
                    "site_url": "https://www.example.org",
                },
            },
            "page1.md": {},
            "dir/page2.md": {},
            "dir/index.html": {},
        }

        with test_utils.testsite(files) as site:
            def url_for(dest, page=None, **kw):
                if page:
                    context = MockContext(page=page)
                else:
                    context = None
                return site.theme.jinja2_url_for(context, dest, **kw)

            page = site.find_page("")
            self.assertEqual(url_for("page1.md", page=page), "/page1")
            self.assertEqual(url_for("page1", page=page), "/page1")

            # Autogenerated index.html do not exist in sources or link
            # namespaces, and do not resolve, even if they would be written on
            # disk
            with self.assertLogs(level="WARN") as out:
                self.assertEqual(url_for("page1/index.html", page=page), "")
            self.assertEqual(len(out.output), 1)
            self.assertIn("cannot resolve `'page1/index.html'` relative to `dir:`", out.output[0])

            # index.html however resolve, as they exist in the sources
            # namespace
            self.assertEqual(url_for("dir", page=page), "/dir")
            self.assertEqual(url_for("dir/index.html", page=page), "/dir")

            # Test absolute urls
            self.assertEqual(url_for("page1", page=page, absolute=True), "https://www.example.org/page1")

    def test_site_path(self):
        files = {
            ".staticsite": {
                "site_url": "https://www.example.org",
                "site_path": "prefix",
            },
            "page1.md": {},
            "page2.rst": {},
            "page3.yaml": {"data_type": "page"},
            "dir/page2.md": {},
            "dir/index.html": {},
        }

        with test_utils.testsite(files) as site:
            def url_for(dest, page=None, **kw):
                if page:
                    context = MockContext(page=page)
                else:
                    context = None
                return site.theme.jinja2_url_for(context, dest, **kw)

            page = site.find_page("prefix")
            self.assertEqual(url_for("page1.md", page=page), "/prefix/page1")
            self.assertEqual(url_for("page1", page=page), "/prefix/page1")

            self.assertEqual(url_for("page2.rst", page=page), "/prefix/page2")
            self.assertEqual(url_for("page2", page=page), "/prefix/page2")

            self.assertEqual(url_for("page3.yaml", page=page), "/prefix/page3")
            self.assertEqual(url_for("page3", page=page), "/prefix/page3")

            # Test absolute urls
            self.assertEqual(url_for("page1", page=page, absolute=True), "https://www.example.org/prefix/page1")


class TestMarkdownFilter(TestCase):
    def test_markdown(self):
        files = {
            "index.html": "",
        }
        with test_utils.workdir(files) as root:
            site = test_utils.Site(PROJECT_ROOT=root)
            site.load()
            site.analyze()

            page = site.find_page("")

            tpl = site.theme.jinja2.from_string(
                    "{% filter markdown %}*This* is an [example](http://example.org){% endfilter %}")

            res = tpl.render(page=page)
            self.assertEqual(res, '<p><em>This</em> is an <a href="http://example.org">example</a></p>')
